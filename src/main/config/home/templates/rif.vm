#macro(showElementRifCS $tag $field $attr $label $anzsrc)
    #set($valueMap = $util.getList($item, $field))
    #foreach($key in $valueMap.keySet())
        #set($value = $valueMap.get($key))
            #if ($label != "" && $value.get($label)!= "")
                #set($labelVal = $value.get($label))
                #if ($anzsrc == "anzsrc")
                    #set($lastIndex = $labelVal.lastIndexOf('/') + 1 )
                    #set($labelVal = $labelVal.substring($lastIndex) )
                #end
    			<$tag$attr>$util.encodeXml($labelVal)</$tag>
        	#end
    #end
#end

#macro(showRelatedInfo $field $relatedInfoType $identifierType)

    #set($valueMap = $util.getList($item, $field))
    #foreach($key in $valueMap.keySet())
        #set ($row = $valueMap.get($key))
        #set ($value = $row.get("dc:identifier"))
        #if ("$!value" != "")
        <rif:relatedInfo type="$relatedInfoType">
            <rif:identifier type="$identifierType">$util.encodeXml($value)</rif:identifier>
            #set ($title = $row.get("dc:title"))
            #if ("$!title" != "")
            <rif:title>$util.encodeXml($title)</rif:title>
            #end
## Uncomment to map Notes as well
##            #set ($notes = $row.get("skos:note"))
##            #if ("$!notes" != "")
##            <rif:notes>$util.encodeXml($notes)</rif:notes>
##            #end
        </rif:relatedInfo>
        #end
    #end
#end

#macro(showRelatedObject $field $relatedInfoType $identifierType)

    #set($valueMap = $util.getList($item, $field))
    #foreach($key in $valueMap.keySet())
        #set ($row = $valueMap.get($key))
        #set ($value = $row.get("dc:identifier"))
        #if ("$!value" != "")
        <rif:relatedObject>
            <rif:key>$util.encodeXml($value)</rif:key>
            #set ($relationship = $row.get("vivo:Relationship.rdf:PlainLiteral"))
            #if ("$relationship" != "")
            <rif:relation type="$relationship"/>
            #end
        </rif:relatedObject>
        #end
    #end
#end


#macro(geoSpatialMacro $field)
    #set($valueMap = $util.getList($item, $field))
    #foreach($key in $valueMap.keySet())
        #set($geoMap = $valueMap.get($key))
        #set($wkt = $geoMap.get("redbox:wktRaw"))
        #set($literal = $geoMap.get("rdf:PlainLiteral"))
        #set($type = $geoMap.get("dc:type"))

        #if($literal != "")
            #### Non - OpenLayers data
            #if($wkt == "")
                <rif:coverage>
                    <rif:spatial type="$type" $lang>$util.encodeXml($literal)</rif:spatial>
                #if($type == "text")
                    #set($east = $geoMap.get("geo:long"))
                    #set($north = $geoMap.get("geo:lat"))
                    #if ("$!east" != "" &&"$!north" != "")
                    <rif:spatial type="dcmiPoint" $lang>name=$util.encodeXml($literal); east=$east; north=$north; projection=WGS84</rif:spatial>
                    #end
                #end
                </rif:coverage>


            #### OpenLayers data
            #else
                #if($type != "")
                    <rif:coverage>
                        <rif:spatial type="$type" $lang>$util.encodeXml($literal)</rif:spatial>
                    </rif:coverage>
                #end
            #end
        #end
    #end
#end

## licenceTypeMacro - tries to generate a licence type attribute based on
## the licence label if it starts with "CC".  If not, empty.

#macro( licenceTypeMacro $label )
    #set( $parts = $label.split(' ') )
    #set( $size = $parts.size() )
    #if( $parts.size() > 1 )
        #if( $parts.get(0) == "CC" )
            #set( $part = $parts.get(1) )
            #set( $len = $part.length() - 1 )
            #set( $part = $part.substring(0, $len) )
            #set( $type = "CC-$part" )
            type="$type"
        #end
    #end
#end

#set($quote='"')
#set($dateFormat = "yyyy-MM-dd'T'HH:mm:ss")

#set($defaultOnError = "&Invalid XML placeholder... prevents ANDS Harvesting records in error&")
#set($group = $systemConfig.getString($defaultOnError, "redbox.identity", "RIF-CS Group"))

### Resolve the identifier
#set ($formId = $util.get($item, 'dc:identifier.rdf:PlainLiteral'))
#set ($formOrigin = $util.get($item, 'dc:identifier.redbox:origin'))
#set ($formType = $util.get($item, 'dc:identifier.dc:type.rdf:PlainLiteral'))

#set($pidType = $systemConfig.getString($defaultOnError, "curation", "pidType"))
#set($pidProperty = $systemConfig.getString($defaultOnError, "curation", "pidProperty"))
#set ($pid = $util.getMetadata($object, $pidProperty))
#if ("$!pid" == "")
    #set ($pid = $util.get($item, "metadata", "rdf:resource"))
    #if ("$!pid" == "")
        #set ($pid = $util.get($item, "metadata", "dc.identifier"))
    #end
#end

#set ($identifier = "")
#set ($identifierType = "")
#if ($formOrigin == "internal")
    #if ($pid != "")
        #set ($identifier = $util.encodeXml($pid))
        #set ($identifierType = $util.encodeXml($pidType))
    #else
        #set ($identifier = $util.encodeXml("$urlBase/detail/$oid"))
        #set ($identifierType = "uri")
    #end
#else
    #set ($identifier = $util.encodeXml($formId))
    #set ($identifierType = $util.encodeXml($formType))
#end
#if ("$!identifier" == "")
    ## We want invalid XML here so the record is never harvested without the correct ID
    #set($identifier = "Invalid ID: Not curated yet")
    #set ($identifierType = "invalid")
#end

### Relationships
#set($relationships = $item.getJsonSimpleList("relationships"))

####set($lang = "xml:lang=${quote}$util.get($item, 'dc:language.dc:identifier')${quote}")
#set($lang = "xml:lang=${quote}en${quote}")
<rif:registryObjects xmlns:rif="http://ands.org.au/standards/rif-cs/registryObjects"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://ands.org.au/standards/rif-cs/registryObjects http://services.ands.org.au/documentation/rifcs/1.3/schema/registryObjects.xsd">
    <rif:registryObject group="$util.encodeXml($group)">
        <rif:key>$identifier</rif:key>
        <rif:originatingSource>$urlBase</rif:originatingSource>

        #set($dateModified = "")
        #if ($util.get($item, 'dc:modified') != "")
            #set($rawModified = "$util.getDateTime($util.get($item, 'dc:modified'), $dateFormat)")
            #set($dateModified = "dateModified=${quote}${rawModified}${quote}")
        #end

        #set($dateAccessioned = "")
        #if ($util.get($item, "dc:created") != "")
            #set($rawAccessioned = "$util.getDateTime($util.get($item, 'dc:created'), $dateFormat)")
            #set($dateAccessioned = "dateAccessioned=${quote}${rawAccessioned}${quote}")
        #end

        #################
        ## The order of child codes under <collection> is important, don't
        ## change the order or the XML will not validate:
        ##  1)  <rif:identifier>
        ##  2)  <rif:name>
        ##  3)  <rif:location>
        ##  4)  <rif:coverage>
        ##  5)  <rif:relatedObject>
        ##  6)  <rif:subject>
        ##  7)  <rif:description>
        ##  8)  <rif:rights>
        ##  9)  <rif:relatedInfo>
        ##  10) <rif:citationInfo>
        ##
        ##  http://services.ands.org.au/documentation/rifcs/1.3/schemadocs/registryObjects.html
        #################
        <rif:collection type="$util.get($item, "dc:type.rdf:PlainLiteral")" $dateModified $dateAccessioned>
            <rif:identifier type="$identifierType">$identifier</rif:identifier>

            <rif:name type="primary" $lang>
                <rif:namePart>$util.encodeXml($util.get($item, "dc:title"))</rif:namePart>
            </rif:name>

	    ## Data Item locations
        
        ## Was building an array of locationNote which were then added
        ## as <rif:description type="note"> elements - I've commented these
        ## out as ANDS don't like them.  -ML 14/1/14

		<rif:location>

			## #set($locationNotes = [])

			#set($valueMap = $util.getList($item, "bibo:DataLocation"))
			#foreach($key in $valueMap.keySet())
				#set ($privacy = $valueMap.get($key).get("dc:privacy"))
			    #if ("$!privacy" == "public")
				    #set($type = $valueMap.get($key).get("dc:type"))
				    #set($location = $valueMap.get($key).get("dc:location"))
				    #set($note = $valueMap.get($key).get("dc:notes"))
				    #if($!type == "url")
						<rif:address>
							<rif:electronic type="url">
								<rif:value>$location</rif:value>
							</rif:electronic>
						</rif:address>
					#elseif($!type == "physical")
						<rif:address>
							<rif:physical>
								<rif:addressPart type="text">$util.encodeXml($location)</rif:addressPart>
							</rif:physical>
						</rif:address>
					#elseif($!type == "file")
						<rif:address>
							<rif:electronic type="file">
								<rif:value>$location</rif:value>
							</rif:electronic>
						</rif:address>
					#else
					#end

##				    #set($locationNote = $location + " -- " + $note)
##				    #set($dataAdded = $locationNotes.add($locationNote))
				#end
			#end
		</rif:location>

        #set ($covFrom = $util.get($item, "dc:coverage.vivo:DateTimeInterval.vivo:start"))
        #set ($covTo = $util.get($item, "dc:coverage.vivo:DateTimeInterval.vivo:end"))
        #set ($covPeriod = $util.get($item, "dc:coverage.redbox:timePeriod"))
        #if ("$!covFrom" != "" || "$!covTo" != "" || "$!covPeriod" != "")
            <rif:coverage>
                <rif:temporal>
                    #if ("$!covFrom" != "")
                    <rif:date type="dateFrom" dateFormat="W3CDTF">$util.getDateTime($covFrom, $dateFormat)Z</rif:date>
                    #end
                    #if ("$!covTo" != "")
                    <rif:date type="dateTo" dateFormat="W3CDTF">$util.getDateTime($covTo, $dateFormat)Z</rif:date>
                    #end
                    #if ("$!covPeriod" != "")
                    <rif:text>$util.encodeXml($covPeriod)</rif:text>
                    #end
                </rif:temporal>
            </rif:coverage>
        #end

            #geoSpatialMacro("dc:coverage.vivo:GeographicLocation")

            ### Relations
            #set($valueList = $item.getJsonSimpleList("relationships"))
            #if($valueList)
                #foreach($value in $valueList)
                    #if ($value.getBoolean(false, "isCurated"))
                        #set($key = $value.getString("empty", "curatedPid"))
                        #set($rel = $value.getString("hasAssociationWith", "relationship"))
                        #set($desc = $value.getString("empty", "description"))
                        #if ($key != "empty")
            <rif:relatedObject>
                <rif:key>$util.encodeXml($key)</rif:key>
                            #if ($desc != "empty")
                <rif:relation type="$util.encodeXml($rel)">
                    <rif:description>$util.encodeXml($desc)</rif:description>
                </rif:relation>
                            #else
                <rif:relation type="$util.encodeXml($rel)"/>
                            #end
            </rif:relatedObject>
                        #end
                    #end
                #end
            #end

            ### National Library Creators - Non-curated
            #set($valueMap = $util.getList($item, "dc:creator.foaf:Person"))
            #foreach($key in $valueMap.keySet())
                #set ($value = $valueMap.get($key).get("dc:identifier"))
                #if ("$!value" != "" && $value.startsWith("http://nla.gov.au/nla.party-"))
            <rif:relatedObject>
                <rif:key>$util.encodeXml($value)</rif:key>
                <rif:relation type="hasCollector"></rif:relation>
            </rif:relatedObject>
                #end
            #end



           	#showElementRifCS ("rif:subject"  "dc:subject.vivo:keyword"  " type=${quote}local${quote} $lang"  "rdf:PlainLiteral"  "")
            #showElementRifCS ("rif:subject"  "dc:subject.anzsrc:for"  " type=${quote}anzsrc-for${quote} $lang"  "rdf:resource"  "anzsrc")
            #showElementRifCS ("rif:subject"  "dc:subject.anzsrc:seo"  " type=${quote}anzsrc-seo${quote} $lang"  "rdf:resource"  "anzsrc")




        #set ($value = $util.get($item, "dc:subject.anzsrc:toa.skos:prefLabel"))
        #if ("$!value" != "")
            <rif:subject type="anzsrc-toa">$util.encodeXml($value)</rif:subject>
        #end

        #set ($value = $util.get($item, "dc:description"))
        #if ("$!value" != "")
            <rif:description type="full" $lang>$util.encodeXml($value)</rif:description>
        #end

## Removed as ANDS rejected them -ML 14/1/14

##        #foreach($locationNote in $locationNotes)
##			<rif:description type="note" $lang>$locationNote</rif:description>
##        #end



        #################
        ## Rights


        #set ($accessRights = $util.get($item, "dc:accessRights.skos:prefLabel"))
        #set ($accessRightsUri = $util.get($item, "dc:accessRights.dc:identifier"))
        #set ($accessRightsUriStr = "")
        #if ("$!accessRightsUri" != "")
            #set ($accessRightsUriStr = " rightsUri=${quote}${accessRightsUri}${quote}")
        #end
        #set ($rights = $util.get($item, "dc:accessRights.dc:RightsStatement.skos:prefLabel"))
        #set ($rightsUri = $util.get($item, "dc:accessRights.dc:RightsStatement.dc:identifier"))
        #set ($rightsUriStr = "")
        #if ("$!rightsUri" != "")
            #set ($rightsUriStr = " rightsUri=${quote}${rightsUri}${quote}")
        #end
        #set ($licence = $util.get($item, "dc:license.skos:prefLabel"))
        #set ($licenceTypeStr = "")
        #if( "$!licence" != "" )
             #set ($licenceTypeStr = " #licenceTypeMacro($licence)")
        #end
        #set ($licenceUri = $util.get($item, "dc:license.dc:identifier"))
        #set ($licenceUriStr = "")
        #if ("$!licenceUri" != "")
            #set ($licenceUriStr = " rightsUri=${quote}${licenceUri}${quote}")
        #else
            #set ($licence = $util.get($item, "dc:license.rdf:Alt.skos:prefLabel"))
            #set ($licenceUri = $util.get($item, "dc:license.rdf:Alt.dc:identifier"))
            #if ("$!licenceUri" != "")
                #set ($licenceUriStr = " rightsUri=${quote}${licenceUri}${quote}")
            #end
        #end

        #if ("$!accessRights" != "" || "$!rights" != "" || "$!licence" != "")
            <rif:rights>
            #if ("$!rights" != "")
                <rif:rightsStatement${rightsUriStr}>$util.encodeXml($rights)</rif:rightsStatement>
            #end
            #if ("$!accessRights" != "")
                <rif:accessRights${accessRightsUriStr}>$util.encodeXml($accessRights)</rif:accessRights>
            #end
            #if ("$!licence" != "")
                <rif:licence${licenceTypeStr}${licenceUriStr}>$util.encodeXml($licence)</rif:licence>
            #end
            </rif:rights>
        #end
        #################

        #showRelatedInfo("dc:relation.swrc:Publication", "publication", "uri")
        #showRelatedInfo("dc:relation.bibo:Website", "website", "uri")

##### Commented out the following because ANDS told us to: the Service has already
##    been included up above in the main relatedObjects loop, and doesn't need to
##    also be included as a relatedInfo object as well.
##
##      #showRelatedInfo("dc:relation.vivo:Service", "service", "uri")
##		#showRelatedObject("dc:relation.vivo:Service", "service", "local")

        #set($showCitation = $util.get($item, "dc:biblioGraphicCitation.redbox:sendCitation"))
        #if ("$!showCitation" != "" && $showCitation == "on")
            #set($doiProperty = $systemConfig.getString($defaultOnError, "andsDoi", "doiProperty"))
            #set ($doi = $util.getMetadata($object, $doiProperty))
            ## Use the DOI by preference for a citation
            #if ("$!doi" == "")
                #set ($citeId = $identifier)
                #set ($citeIdType = $identifierType)
            #else
                #set ($citeId = "http://dx.doi.org/${doi}")
                #set ($citeIdType = "doi")
            #end
            <rif:citationInfo>
            #set($citationString = $util.get($item, "dc:biblioGraphicCitation.skos:prefLabel"))
            #if ("$!citationString" != "")
                <rif:fullCitation style="Datacite">$util.encodeXml($citationString.replaceAll("\{ID_WILL_BE_HERE\}", $citeId))</rif:fullCitation>
            #end
            ## <rif:citationMetadata/> has now been removed.
            ## See http://code.google.com/p/redbox-mint/issues/detail?id=77
            </rif:citationInfo>
        #end
        </rif:collection>
    </rif:registryObject>
</rif:registryObjects>
