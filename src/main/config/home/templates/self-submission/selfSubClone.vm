#macro(Grants $map $key $order)
	#set($queryKey = "${key}")
	#set ($value = $map.get($queryKey))
	#if ("$!value" != "")
	"foaf:fundedBy.vivo:Grant.${order}.${key}": "$value",
	#end
#end

#macro(FundingSources $map $key $order)
	#set($queryKey = "${key}")
	#set ($value = $map.get($queryKey))
	#if ("$!value" != "")
	"foaf:fundedBy.foaf:Agent.${order}.${key}": "$value",
	#end
#end

#macro(copyCodes $map $key $order $type)
	#set ($value = $map.get($key))
	#if ("$!value" != "")
	"dc:subject.anzsrc:${type}.${order}.${key}": "$value",
	#end
#end

#macro(mapTo $from $to)
	#set($v = $util.get($item, $from))
	#if ($v) "$to": "$!v",
	#end
#end
{
"viewId": "dashboard",
"packageType": "self-submission",
"viewId": "dashboard",
"dc:title": "[untitled]",
"dc:description": "$util.get($item, 'dc:description')",
#mapTo('oid', 'redbox:ManagementPlan.oid')
#mapTo('dc:title', 'redbox:ManagementPlan.skos:note')
#foreach( $key in ["swrc:supervisor.foaf:Person.foaf:title","swrc:supervisor.foaf:Person.foaf:givenName","swrc:supervisor.foaf:Person.foaf:familyName"
,"swrc:supervisor.foaf:Person.foaf:email","swrc:supervisor.foaf:Person.dc:identifier"
,"locrel:prc.foaf:Person.foaf:title","locrel:prc.foaf:Person.foaf:givenName","locrel:prc.foaf:Person.foaf:familyName"
,"locrel:prc.foaf:Person.dc:identifier","locrel:prc.foaf:Person.foaf:email"
,"dc:coverage.vivo:DateTimeInterval.vivo:end","dc:coverage.redbox:timePeriod" ,"dc:coverage.vivo:DateTimeInterval.vivo:start"
,"dc:license.dc:identifier"
,"dc:license.skos:prefLabel"
,"dc:subject.anzsrc:toa.rdf:resource","dc:subject.anzsrc:toa.skos:prefLabel"
,"redbox:retentionPeriod.dc:date"
])
	#set($v = $util.get($item, $key))
	#if ($v) "$key": "$!v",
	#end
#end

#foreach( $key in [
"dc:type.skos:prefLabel",
"dc:coverage.vivo:GeographicLocation.1.dc:type",
"dc:coverage.vivo:GeographicLocation.2.dc:type",
"dc:coverage.vivo:GeographicLocation.1.redbox:wktRaw",
"dc:coverage.vivo:GeographicLocation.2.redbox:wktRaw",
"dc:coverage.vivo:GeographicLocation.1.rdf:PlainLiteral",
"dc:coverage.vivo:GeographicLocation.2.rdf:PlainLiteral",
"dc:coverage.vivo:GeographicLocation.1.geo:long",
"dc:coverage.vivo:GeographicLocation.2.geo:long",
"dc:coverage.vivo:GeographicLocation.1.geo:lat",
"dc:coverage.vivo:GeographicLocation.2.geo:lat",
"dc:coverage.vivo:GeographicLocation.1.dc:identifier",
"dc:coverage.vivo:GeographicLocation.2.dc:identifier",
"dc:relation.swrc:Publication.1.dc:identifier",
"dc:relation.swrc:Publication.1.dc:title",
"dc:relation.swrc:Publication.1.skos:note",
"dc:relation.bibo:Website.1.dc:identifier",
"dc:relation.bibo:Website.1.dc:title",
"dc:relation.bibo:Website.1.skos:note",
"dc:relation.vivo:Dataset.1.dc:identifier",
"dc:relation.vivo:Dataset.1.vivo:Relationship.rdf:PlainLiteral",
"dc:relation.vivo:Dataset.1.vivo:Relationship.skos:prefLabel",
"dc:relation.vivo:Dataset.1.dc:title",
"dc:relation.vivo:Dataset.1.skos:note",
"dc:relation.vivo:Dataset.1.redbox:origin",
"dc:relation.vivo:Dataset.1.redbox:publish",
"dc:relation.vivo:Service.1.dc:identifier",
"dc:relation.vivo:Service.1.vivo:Relationship.rdf:PlainLiteral",
"dc:relation.vivo:Service.1.vivo:Relationship.skos:prefLabel",
"dc:relation.vivo:Service.1.dc:title",
"dc:relation.vivo:Service.1.skos:note",
"dc:creator.foaf:Person.1.dc:identifier",
"dc:creator.foaf:Person.1.foaf:name",
"dc:creator.foaf:Person.1.foaf:title",
"dc:creator.foaf:Person.1.redbox:isCoPrimaryInvestigator",
"dc:creator.foaf:Person.1.redbox:isPrimaryInvestigator",
"dc:creator.foaf:Person.1.foaf:givenName",
"dc:creator.foaf:Person.1.foaf:familyName",
"dc:creator.foaf:Person.1.foaf:Organization.dc:identifier",
"dc:creator.foaf:Person.1.foaf:Organization.skos:prefLabel",
"locrel:prc.foaf:Person.dc:identifier",
"swrc:supervisor.foaf:Person.1.dc:identifier",
"swrc:supervisor.foaf:Person.1.foaf:name",
"swrc:supervisor.foaf:Person.1.foaf:title",
"swrc:supervisor.foaf:Person.1.foaf:givenName",
"swrc:supervisor.foaf:Person.1.foaf:familyName",
"dc:contributor.locrel:clb.1.foaf:Agent",
"dc:subject.anzsrc:seo.1.skos:prefLabel",
"dc:subject.anzsrc:seo.1.rdf:resource",
"dc:subject.anzsrc:for.1.skos:prefLabel",
"dc:subject.anzsrc:for.1.rdf:resource",
"dc:subject.vivo:keyword.1.rdf:PlainLiteral",
"dc:subject.anzsrc:toa.rdf:resource",
"dc:subject.anzsrc:toa.skos:prefLabel",
"dc:accessRights.skos:prefLabel",
"dc:accessRights.dc:identifier",
"dc:accessRights.dc:RightsStatement.skos:prefLabel",
"dc:accessRights.dc:RightsStatement.dc:identifier",
"dc:license.rdf:Alt.skos:prefLabel",
"dc:license.rdf:Alt.dc:identifier",
"dc:identifier.rdf:PlainLiteral",
"dc:identifier.dc:type.rdf:PlainLiteral",
"dc:identifier.dc:type.skos:prefLabel",
"dc:identifier.redbox:origin",
"locrel:own.foaf:Agent.1.foaf:name",
"locrel:dtm.foaf:Agent.foaf:name",
"foaf:Organization.dc:identifier",
"foaf:Organization.skos:prefLabel",
"foaf:fundedBy.foaf:Agent.1.skos:prefLabel",
"foaf:fundedBy.foaf:Agent.1.dc:identifier",
"foaf:fundedBy.vivo:Grant.1.redbox:internalGrant",
"foaf:fundedBy.vivo:Grant.1.redbox:grantNumber",
"foaf:fundedBy.vivo:Grant.1.dc:identifier",
"foaf:fundedBy.vivo:Grant.1.skos:prefLabel",
"swrc:ResearchProject.dc:title",
"locrel:dpt.foaf:Person.foaf:name",
"dc:Policy",
"redbox:ManagementPlan.redbox:hasPlan",
"redbox:ManagementPlan.skos:note",
"skos:note.1.dc:created",
"skos:note.1.foaf:name",
"skos:note.1.dc:description",
"xmlns:dc",
"xmlns:foaf",
"xmlns:anzsrc"
])
	#set($v = $util.get($item, $key))
	#if ($v) "$key": "$!v",
	#end
#end


#foreach( $key in ["dc:type.rdf:PlainLiteral", "self-submission.field.dc-identifier.redboxdmpt-doirequest",  "dc:subject.vivo:keyword.1.rdf:PlainLiteral",
"dc:license.rdf:Alt.skos:prefLabel","dc:license.rdf:Alt.dc:identifier","dc:identifier.rdf:PlainLiteral","dc:identifier.dc:type.rdf:PlainLiteral",
"dc:identifier.dc:type.skos:prefLabel","dc:identifier.redbox:origin",
"locrel:dtm.foaf:Agent.foaf:name","foaf:Organization.dc:identifier",
"foaf:Organization.skos:prefLabel","swrc:ResearchProject.dc:title","locrel:dpt.foaf:Person.foaf:name",
"dc:Policy","dc:accessRights.dc:RightsStatement.skos:prefLabel","dc:accessRights.dc:RightsStatement.dc:identifier","dc:accessRights.skos:prefLabel","dc:accessRights.dc:identifier",
"dc:subject.anzsrc:toa.rdf:resource","dc:subject.anzsrc:toa.skos:prefLabel"
])
	#set($v = $util.get($item, $key))
	#if ($v) "$key": "$!v",
	#else
	"$key": "",
	#end
#end

## Principal Investigators
#mapTo("dc:creator.foaf:Person.foaf:title" "dc:creator.foaf:Person.foaf:title")
#mapTo("dc:creator.foaf:Person.foaf:givenName" "dc:creator.foaf:Person.foaf:givenName")
#mapTo("dc:creator.foaf:Person.foaf:familyName" "dc:creator.foaf:Person.foaf:familyName")
#mapTo("dc:creator.foaf:Person.foaf:email" "dc:creator.foaf:Person.foaf:email")
#mapTo("dc:creator.foaf:Person.dc:identifier" "dc:creator.foaf:Person.dc:identifier")
#mapTo("dc:RightsStatement" "dc:accessRights.dc:RightsStatement.skos:prefLabel")

## Collaborators
#set($index = 1)
#foreach($index in  [1..10000])
	#if (! $util.get($item, "dc:contributor.locrel:clb.${index}.foaf:Agent.dc:identifier"))
		#break
	#end

	#Collaborators("foaf:title" $index)
	#Collaborators("foaf:givenName" $index)
	#Collaborators("foaf:familyName" $index)
	#Collaborators("foaf:email" $index)
	#Collaborators("dc:identifier" $index)
#end

#macro(Collaborators $key $index)
	#set ($value = $util.get($item, "dc:contributor.locrel:clb.${index}.foaf:Agent.${key}"))
	#if ("$!value" != "")
		"dc:contributor.locrel:clb.${index}.foaf:Agent.${key}": "$value",
	#end
#end

#set($cList = $util.getList($item, "foaf:fundedBy.foaf:Agent"))
#set($order = 1)
#if ($cList.size() > 0)
	#foreach($key in $cList.keySet())
		#set($slot = $cList.get($key))
		#FundingSources($slot "skos:prefLabel" $order)
		#FundingSources($slot "dc:identifier" $order)
		#set($order = $order + 1)
	#end
#end

#set($cList = $util.getList($item, "foaf:fundedBy.vivo:Grant"))
#set($order = 1)
#if ($cList.size() > 0)
	#foreach($key in $cList.keySet())
		#set($slot = $cList.get($key))
		#Grants($slot "skos:prefLabel" $order)
		#Grants($slot "dc:identifier" $order)
		#Grants($slot "redbox:grantNumber" $order)
		#set($order = $order + 1)
	#end
#end

#mapTo("dc:license.dc:identifier.other" "dc:license.rdf:Alt.skos:prefLabel")
#mapTo("dc:rights.skos:note" "dc:accessRights.skos:prefLabel")
##mapTo("dc:RightsStatement" "dc:accessRights.dc:RightsStatement.skos:prefLabel")
#mapTo("dc:license.dc:identifier.url" "dc:license.rdf:Alt.dc:identifier")

#set($cList = $util.getList($item, "dc:subject.anzsrc:for"))
#set($order = 1)
#if ($cList.size() > 0)
	#foreach($key in $cList.keySet())
		#set($slot = $cList.get($key))
		#copyCodes($slot "skos:prefLabel" $order 'for')
		#copyCodes($slot "rdf:resource" $order 'for')
		#copyCodes($slot ".top.dropdown" $order 'for')
		#copyCodes($slot ".middle.dropdown" $order 'for')
		#copyCodes($slot ".bottom.dropdown" $order 'for')
		#set($order = $order + 1)
	#end
#end


#set($cList = $util.getList($item, "dc:subject.anzsrc:seo"))
#set($order = 1)
#if ($cList.size() > 0)
	#foreach($key in $cList.keySet())
		#set($slot = $cList.get($key))
		#copyCodes($slot "skos:prefLabel" $order 'seo')
		#copyCodes($slot "rdf:resource" $order 'seo')
		#copyCodes($slot ".top.dropdown" $order 'seo')
		#copyCodes($slot ".middle.dropdown" $order 'seo')
		#copyCodes($slot ".bottom.dropdown" $order 'seo')
		#set($order = $order + 1)
	#end
#end
"redbox:newForm": "$util.get($item, 'redbox:newForm')",
"redbox:formVersion": "$util.get($item, 'redbox:formVersion')"
}